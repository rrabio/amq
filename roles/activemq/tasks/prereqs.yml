---
- name: Clear internal templating variables
  ansible.builtin.set_fact:
    security_settings: []
    security_settings_matches: {}
    management_access_default: []
    management_access_domains: []
    addresses: []
    acceptors: []
    connectors: []
    address_settings: []
    diverts: []
    broker_connections: []
    masked_users: []

- name: Validate credentials
  ansible.builtin.assert:
    that: >
      ((rhn_username is defined and amq_broker_enable is defined and amq_broker_enable) or
        amq_broker_enable is not defined or not amq_broker_enable or activemq_offline_install) and
      ((rhn_password is defined and amq_broker_enable is defined and amq_broker_enable) or
        amq_broker_enable is not defined or not amq_broker_enable or activemq_offline_install)
    quiet: true
    fail_msg: >
      Cannot install Red Hat AMQ Broker without RHN credentials. Check rhn_username and rhn_password are defined or use offline installation
    success_msg: "{{ 'Installing ' + activemq.service_name }}"

- name: Validate TLS config
  ansible.builtin.assert:
    that:
      - activemq_tls_truststore_path is defined
      - activemq_tls_truststore_password is defined
      - activemq_tls_keystore_path is defined
      - activemq_tls_keystore_password is defined
  when: activemq_tls_enabled

- name: Validate TLS mutual auth config
  ansible.builtin.assert:
    that:
      - activemq_tls_truststore_path is defined
      - activemq_tls_truststore_password is defined
      - activemq_tls_keystore_path is defined
      - activemq_tls_keystore_password is defined
      - activemq_tls_enabled
  when: activemq_tls_mutual_authentication

- name: Check local download archive path
  ansible.builtin.stat:
    path: "{{ activemq_local_archive_repository }}"
  register: local_path
  delegate_to: localhost
  run_once: true
  become: false

- name: Validate local download path
  ansible.builtin.assert:
    that:
      - local_path.stat.exists
      - local_path.stat.readable
      - activemq_offline_install or local_path.stat.writeable
    quiet: true
    fail_msg: "Defined controller path for downloading resource is incorrect: {{ activemq_local_archive_repository }}"
    success_msg: "Will download resource to controller path: {{ local_path.stat.path }}"
  delegate_to: localhost
  run_once: true

- name: Check downloaded archive if offline
  ansible.builtin.stat:
    path: "{{ local_path.stat.path }}/{{ activemq.bundle }}"
  when: activemq_offline_install
  register: local_archive_path_check
  delegate_to: localhost
  run_once: true

- name: Validate local downloaded archive if offline
  ansible.builtin.assert:
    that:
      - local_archive_path_check.stat.exists
      - local_archive_path_check.stat.readable
    quiet: true
    fail_msg: "Configured for offline install but install archive not found at: {{ local_archive_path_check.stat.path }}"
    success_msg: "Will install offline with expected archive: {{ local_archive_path_check.stat.path }}"
  when: activemq_offline_install
  delegate_to: localhost
  run_once: true

- name: Validate local custom template
  ansible.builtin.assert:
    that:
      - lookup('ansible.builtin.template', activemq_logger_config_template)
    quiet: true
    fail_msg: "Template not found or not readable for logging: {{ activemq_logger_config_template }}"
    success_msg: "Will use custom logging template: {{ activemq_logger_config_template }}"

- name: Validate broker custom template
  ansible.builtin.assert:
    that:
      - lookup('ansible.builtin.template', activemq_config_override_template)
    quiet: true
    fail_msg: "Template not found or not readable for broker.xml: {{ activemq_config_override_template }}"
    success_msg: "Will use custom template: {{ activemq_config_override_template }}"
  when: activemq_config_override_template | length > 0

- name: Retrieve xsd schemas
  block:
    - name: Make collection xsd available for validation
      ansible.builtin.copy: # noqa risky-file-permissions delegated, uses controller host user
        src: "artemis-configuration-{{ activemq_version.split('.')[:2] | join('.') }}.xsd"
        dest: "{{ local_path.stat.path }}/artemis-configuration.xsd"
        mode: '0644'
      delegate_to: localhost
      run_once: true
      changed_when: False  # it does not change targets, validation is on controller
    - name: Make collection xsd available for validation
      ansible.builtin.copy: # noqa risky-file-permissions delegated, uses controller host user
        src: "artemis-server.xsd"
        dest: "{{ local_path.stat.path }}/artemis-server.xsd"
        mode: '0644'
      delegate_to: localhost
      run_once: true
      changed_when: False  # it does not change targets, validation is on controller
    - name: Make collection xml.xsd available for validation
      ansible.builtin.copy: # noqa risky-file-permissions delegated, uses controller host user
        src: "xml.xsd"
        dest: "{{ local_path.stat.path }}/xml.xsd"
        mode: '0644'
      delegate_to: localhost
      run_once: true
      changed_when: False  # it does not change targets, validation is on controller
  rescue:
    - name: Fetch artemis configuration xsd schema for requested version
      ansible.builtin.get_url: # noqa risky-file-permissions delegated, uses controller host user
        url: "{{ item }}"
        dest: "{{ local_path.stat.path }}/"
        mode: '0640'
      delegate_to: localhost
      changed_when: False  # it does not change targets, validation is on controller
      run_once: true
      retries: 3
      delay: 5
      loop:
        - "{{ activemq.config_xsd }}"
        - "{{ activemq.server_xsd }}"
        - https://www.w3.org/2001/03/xml.xsd

- name: Ensure required packages are installed
  ansible.builtin.include_tasks: fastpackages.yml
  vars:
    packages_list: "{{ activemq.package_list }}"

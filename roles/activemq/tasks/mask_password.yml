---
- name: Set masked (hashed) user password
  block:
    - name: Parse passwd hash for existing user
      ansible.builtin.set_fact:
        existing_user: "{{ existing_users.content | b64decode | regex_search('\\b' + item.user + ' ?= ?ENC\\([0-9]+:([^:]+):([^)]+)\\)', '\\1', '\\2') | default([]) }}"
    - name: Parse passwd for existing user salt
      ansible.builtin.set_fact:
        hash_password: "{{ item.password | middleware_automation.amq.pbkdf2_hmac(hashname=activemq_mask_password_hashname, iterations=activemq_mask_password_iterations, hexsalt=existing_user[0]) }}"
      when: existing_user | length > 0
      no_log: true
    - name: Get masked password for user
      ansible.builtin.command: "{{ activemq.instance_home }}/bin/artemis mask --hash {{ '--password-codec' if activemq_password_codec != 'org.apache.activemq.artemis.utils.DefaultSensitiveStringCodec' else '' }} -- '{{ item.password }}'"
      become: true
      become_user: "{{ activemq_service_user }}"
      register: mask_pwd
      changed_when: False
      no_log: true
      when: existing_user | length == 0 or hash_password != existing_user[1]
    - name: Add masked password to users list
      ansible.builtin.set_fact:
        masked_users: "{{ masked_users | default([]) + [{ 'user': item.user, 'password': mask_pwd.stdout | regex_search('result: (.+)', '\\1', multiline=True) | first, 'roles': item.roles }] }}"
      no_log: true
      when:
        - existing_user | length == 0 or hash_password != existing_user[1]
        - item.password is defined and item.password | length > 0
    - name: Add existing user to users list
      ansible.builtin.set_fact:
        masked_users: "{{ masked_users | default([]) + [{ 'user': item.user, 'password': activemq_mask_password_iterations | string + ':' + existing_user[0] + ':' + existing_user[1], 'roles': item.roles }] }}"
      no_log: true
      when:
        - existing_user | length > 0
        - hash_password == existing_user[1]
        - item.password is defined and item.password | length > 0

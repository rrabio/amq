---
driver:
  name: docker
platforms:
  - name: instance1
    image: registry.access.redhat.com/ubi8/ubi-init:latest
    pre_build_image: true
    privileged: true
    command: "/usr/sbin/init"
    networks:
      - name: amq
    tmpfs:
      - /run
      - /tmp
    volumes:
      - nfs:/opt/amq/amq-broker/data/shared
  - name: instance2
    image: registry.access.redhat.com/ubi8/ubi-init:latest
    pre_build_image: true
    privileged: true
    command: "/usr/sbin/init"
    networks:
      - name: amq
    tmpfs:
      - /run
      - /tmp
    volumes:
      - nfs:/opt/amq/amq-broker/data/shared
provisioner:
  name: ansible
  config_options:
    defaults:
      interpreter_python: auto_silent
    ssh_connection:
      pipelining: false
  playbooks:
    prepare: prepare.yml
    converge: converge.yml
    verify: verify.yml
  inventory:
    host_vars:
      localhost:
        ansible_python_interpreter: "{{ ansible_playbook_python }}"
      instance1:
        activemq_ha_role: 'primary'
        activemq_broker_connections:
          - uri: 'tcp://instance1:61616?sslEnabled=True;keyStorePath=/opt/amq/amq-broker/etc/identity.ks;keyStorePassword=securepass;trustStorePath=/opt/amq/amq-broker/etc/trust.ks;trustStorePassword=securepass;verifyHost=False'
            name: brokerA-2-brokerA
            user: amq-broker
            password: amq-broker
            operations:
              - type: sender
                parameters:
                  address_match: 'b.#'
              - type: receiver
                parameters:
                  address_match: 'a.#'
      instance2:
        activemq_ha_role: 'backup'
  env:
    ANSIBLE_FORCE_COLOR: "true"
verifier:
  name: ansible
scenario:
  test_sequence:
    - cleanup
    - destroy
    - create
    - prepare
    - converge
    - idempotence
    - side_effect
    - verify
    - cleanup
    - destroy
